// Generated by gencpp from file detector_ros/ShapeDetection.msg
// DO NOT EDIT!


#ifndef DETECTOR_ROS_MESSAGE_SHAPEDETECTION_H
#define DETECTOR_ROS_MESSAGE_SHAPEDETECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace detector_ros
{
template <class ContainerAllocator>
struct ShapeDetection_
{
  typedef ShapeDetection_<ContainerAllocator> Type;

  ShapeDetection_()
    : shape()
    , color()
    , cx(0)
    , cy(0)
    , area(0.0)  {
    }
  ShapeDetection_(const ContainerAllocator& _alloc)
    : shape(_alloc)
    , color(_alloc)
    , cx(0)
    , cy(0)
    , area(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _shape_type;
  _shape_type shape;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _color_type;
  _color_type color;

   typedef int32_t _cx_type;
  _cx_type cx;

   typedef int32_t _cy_type;
  _cy_type cy;

   typedef float _area_type;
  _area_type area;





  typedef boost::shared_ptr< ::detector_ros::ShapeDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detector_ros::ShapeDetection_<ContainerAllocator> const> ConstPtr;

}; // struct ShapeDetection_

typedef ::detector_ros::ShapeDetection_<std::allocator<void> > ShapeDetection;

typedef boost::shared_ptr< ::detector_ros::ShapeDetection > ShapeDetectionPtr;
typedef boost::shared_ptr< ::detector_ros::ShapeDetection const> ShapeDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detector_ros::ShapeDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detector_ros::ShapeDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::detector_ros::ShapeDetection_<ContainerAllocator1> & lhs, const ::detector_ros::ShapeDetection_<ContainerAllocator2> & rhs)
{
  return lhs.shape == rhs.shape &&
    lhs.color == rhs.color &&
    lhs.cx == rhs.cx &&
    lhs.cy == rhs.cy &&
    lhs.area == rhs.area;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::detector_ros::ShapeDetection_<ContainerAllocator1> & lhs, const ::detector_ros::ShapeDetection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace detector_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::detector_ros::ShapeDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detector_ros::ShapeDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detector_ros::ShapeDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detector_ros::ShapeDetection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detector_ros::ShapeDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detector_ros::ShapeDetection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detector_ros::ShapeDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "528c5d41c8b24d2086672a7ff9129f60";
  }

  static const char* value(const ::detector_ros::ShapeDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x528c5d41c8b24d20ULL;
  static const uint64_t static_value2 = 0x86672a7ff9129f60ULL;
};

template<class ContainerAllocator>
struct DataType< ::detector_ros::ShapeDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detector_ros/ShapeDetection";
  }

  static const char* value(const ::detector_ros::ShapeDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detector_ros::ShapeDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string shape\n"
"string color\n"
"int32 cx\n"
"int32 cy\n"
"float32 area\n"
;
  }

  static const char* value(const ::detector_ros::ShapeDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detector_ros::ShapeDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.shape);
      stream.next(m.color);
      stream.next(m.cx);
      stream.next(m.cy);
      stream.next(m.area);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ShapeDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detector_ros::ShapeDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detector_ros::ShapeDetection_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "shape: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.shape);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.color);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cx: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cx);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cy);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "area: ";
    Printer<float>::stream(s, indent + "  ", v.area);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETECTOR_ROS_MESSAGE_SHAPEDETECTION_H
